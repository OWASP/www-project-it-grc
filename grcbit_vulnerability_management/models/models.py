# -*- coding: utf-8 -*-
from odoo import models, fields, api
import requests
import json
from odoo.exceptions import UserError
import logging
import dateutil.parser
from json2table import convert

_logger = logging.getLogger(__name__)

class CommonVulnerabityExposure(models.Model):
    _name = 'common.vulnerability.exposure'
    _description = 'Common Vulnerability Exposure'
    _rec_name = 'cveId'

    cveId = fields.Char(string='CVE')
    description = fields.Html(string='Description')
    date_download = fields.Datetime(string='Download Date', default=fields.Datetime.now) #lambda self: datetime.now(), readonly=True)
    active = fields.Boolean(default=True)
    #published = fields.Char(string='Published')
    #cve_modified = fields.Char(string='Modified')
    #severity = fields.Char(string='Severity')
    #state = fields.Char(string='State')
    #affected = fields.Html(string='Affected')
    #reference = fields.Html(string='Reference')
    #problemType = fields.Html(string='Problem Type')
    #active = fields.Boolean(default=True)
    _sql_constraints = [('unique_cveId', 'unique(cveId)', 'The CVE already exists.')]

    # Wizard will be used in following version
    '''
    def open_cve_wizard(self):
        return {
            'name': 'CVE Search',
            'type': 'ir.actions.act_window',
            'res_model': 'vulnerability.search.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {'default_cve_id': self.id},  # Pass inventory ID to wizard
        }
    '''

    @api.model
    def create(self, vals):
        record = super(CommonVulnerabityExposure, self).create(vals)
        record.search_cve()
        return record

    def search_cve(self):
        for i in self:
            url = f"https://cve.circl.lu/api/cve/{i.cveId}"
            response = requests.get(url)
            response.raise_for_status() # Raise error for bad HTTP status
            data = response.json()

            if isinstance(data, dict):
              data = [data] # Ensure data is a list

            for item in data:
                html_table_description = '' #pd.DataFrame(item).to_html()
                build_direction = "LEFT_TO_RIGHT"
                table_attributes = {'style':'width:100%'}
                html_table_description = convert(item, build_direction=build_direction, table_attributes=table_attributes)
                i.description = html_table_description
        return True

class VulnerabilitySearchWizard(models.TransientModel):
    _name = 'vulnerability.search.wizard'
    _description = 'CVE Search Wizard'

    search_type = fields.Selection([
        ('vendor_product', 'Get CVE per vendor and a specific product'),
        ('cve_id', 'Get CVE ID'),
        ('it_inventory_it_component', 'Get CVE by IT Component')
    ], string='CVE Search', required=True)
    vendor = fields.Char('Vendor')
    specific_product = fields.Char('Product')
    cve_id = fields.Char('CVE ID')
    it_inventory_it_component_id = fields.Many2one('it.inventory.it.component', string="IT Component")

    def search_vulnerabilities(self):
        if self.search_type == 'vendor_product':
            if not self.vendor or not self.specific_product:
                raise UserError("Debes especificar Vendor y Producto Específico.")
            url = f"https://cve.circl.lu/api/search/{self.vendor}/{self.specific_product}"
        elif self.search_type == 'cve_id':
            if not self.cve_id:
                raise UserError("Debes especificar CVE ID Específico.")
            url = f"https://cve.circl.lu/api/cve/{self.cve_id}"
        elif self.search_type == 'it_inventory_it_component':
            if not self.it_inventory_it_component_id: # or not self.inventory_id.it_component_ids:
                raise UserError('Debes seleccionar un inventario con componentes.')
            component_ids = it_inventory_it_component_id #','.join([component.name for component in self.inventory_id.it_component_ids])
            url = f"https://cve.circl.lu/api/browse/{component_ids}"
        else:
          raise UserError("Debes elegir un tipo de busqueda.")
        try:
            response = requests.get(url)
            response.raise_for_status() # Raise error for bad HTTP status
            data = response.json()
    
            if isinstance(data, dict):
              data = [data] # Ensure data is a list

            for item in data:

                html_table_description = '' #pd.DataFrame(item).to_html()
                build_direction = "LEFT_TO_RIGHT"
                table_attributes = {'style':'width:100%'}
                html_table_description = convert(item, build_direction=build_direction, table_attributes=table_attributes)

                self.env['common.vulnerability.exposure'].create({ 'cveId':self.cve_id, 'description':html_table_description  })

            return {'type': 'ir.actions.act_window_close'} # Close Wizard.

        except requests.exceptions.RequestException as e:
            raise UserError(f"API conection error: {e}")

        except json.JSONDecodeError:
            raise UserError("Error: API invalid JSON.")

        except Exception as e:
            raise UserError(f"Error: {e}")
