<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>

        <!-- simple pie chart -->
        <record id="mana_dashboard.template_simple_pie_chart" model="mana_dashboard.template">
            <field name="name">Simple Pie Chart</field>
            <field name="category">chart</field>
            <field name="type">pie chart</field>
            <field name="component_type">pie_chart</field>
            <field name="preview" type="base64" file="mana_dashboard/static/previews/pie_chart/simple_pie_chart.png"/>
            <field name="scripts">
<![CDATA[

let config = this.get_config()
let data_source = this.get_data_source(0)
if (!data_source || !data_source.is_valid()) {
  return
}

// set the record position
let option = {
  title: {
    text: config.get_title(), // set the title here
    // subtext: 'Fake Data', // remove the slash to show the subtext
    left: 'center' // set the title position, left, right, center
  },
  tooltip: {
    trigger: 'item' // set the tooltip trigger, item, axis, none
  },
  legend: {
    orient: 'vertical', // set the legend orientation, horizontal, vertical
    left: 'left' // set the legend position, left, right, center
  },
  series: []
};

let series = []
let categories = data_source.get_categories()
let measures = data_source.get_measures()
let records_count = data_source.get_records_count()

function format_name(category, name) {
  if (!name) {
    return ''
  }

  if (Array.isArray(name)) {
    if (name.length == 2) {
      if (Number.isInteger(name[0]) && typeof name[1] === 'string') {
        return name[1];
      }
    }
    return name.join(',');
  }

    // check field is selction
  if (data_source.is_selection(category)) {
    return data_source.get_selection_val(category, name)
  }

  return name;
}

for (let i = 0; i < categories.length; i++) {

  let category = categories[i]
  for (let j = 0; j < measures.length; j++) {
    let series_item = {
      name: category,
      type: 'pie',
      radius: '50%',
      data: [],
      emphasis: {
        itemStyle: {
          shadowBlur: 10,
          shadowOffsetX: 0,
          shadowColor: 'rgba(0, 0, 0, 0.5)'
        }
      }
    }
    let measure = measures[j]
    for (let k = 0; k < records_count; k++) {
      let record = data_source.get_record(k)
      series_item.data.push({
        value: record.get_value(measure),
        name: format_name(category, record.get_value(category)),
        origin_value: record.get_value(category)
      })
    }
    series.push(series_item)
  }
}

option.series = series
this.setOption(option)
]]>
            </field>
        </record>

    </data>
</odoo>