<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>

        <!-- mana dashboard data table template one -->
        <record id="mana_dashboard.data_table_template_one" model="mana_dashboard.template">
            <field name="name">Data Table Template One</field>
			<field name="category">data_table</field>
            <field name="type">tabulator</field>
            <field name="component_type">tabulator</field>
            <field name="template">
<![CDATA[
]]>
            </field>
			
            <!-- styles -->
            <field name="styles">
<![CDATA[
]]>
            </field>
            <!-- scripts -->
            <field name="scripts">
<![CDATA[
try {
    let config = this.model.get('config');
    let data_source = this.get_data_source(0);
    if (!data_source || !data_source.is_valid()) {
        this.renderDefaultTable();
        return this;
    }

    let data_source_type_name = data_source.data_source_type;
    if (data_source_type_name == 'model') {

        let data_source_info = data_source.get_data_source_info();
        let model_fields = data_source_info.model_fields;
        let model = data_source_info.model_name;
        let domain = data_source_info.domain || [];
        let context = data_source_info.context || {};
        let user_context = this.getSession().user_context || {};

        context = _.extend({}, user_context, context, { bin_size: true });

        // get column infos
        let column_infos = model_fields.map((field) => {
            let title = field.title;
            let raw_field = data_source.get_raw_field(field.field_name);
            if (raw_field && raw_field.alias) {
                title = raw_field.alias;
            }
            return {
                title: title,
                field: field.field_name,
                sorter: () => {
                    switch (field.type) {
                        case 'char':
                        case 'text':
                        case 'html':
                        case 'selection':
                        case 'many2one':
                        case 'one2many':
                        case 'many2many':
                            return 'string';
                        case 'integer':
                        case 'float':
                        case 'monetary':
                            return 'number';
                        case 'boolean':
                            return 'boolean';
                        case 'date':
                        case 'datetime':
                            return 'date';
                        default:
                            return 'string';
                    }
                },
                formatter: function(cell, formatterParams, onRendered){
                    if (field.field_type == "many2one") {
                        let value = cell.getValue();
                        if (value && value[1]) {
                            return value[1];
                        }
                    }
                    return cell.getValue();
                },
                headerSort: true,
            }
        });

        this.table = new Tabulator(this.el, {
            height: "100%",
            pagination: true,
            paginationMode: "remote",
            paginationSize: 5,
            paginationSizeSelector: [5, 10, 20, 30],
            columns: column_infos,
            layout:"fitColumns", //fit columns to width of table (optional)
            sortMode: "remote",
            dataLoader: false,
            headerSortElement: function (column, dir) {
                switch (dir) {
                    case "asc":
                        return '<svg class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" width="20" height="20"><path d="M469.333333 384h384v85.333333h-384z m0 170.666667h298.666667v85.333333h-298.666667z m0-341.333334h469.333334v85.333334H469.333333z m0 512h213.333334v85.333334h-213.333334z m-256 128h85.333334V341.333333h128L256 170.666667 85.333333 341.333333h128z" fill="#8a8a8a"></path></svg>';
                        break;
                    case "desc":
                        return '<svg class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" width="20" height="20"><path d="M426.666667 554.666667 426.666667 469.333333 768 469.333333 768 554.666667 426.666667 554.666667M426.666667 810.666667 426.666667 725.333333 597.333333 725.333333 597.333333 810.666667 426.666667 810.666667M426.666667 298.666667 426.666667 213.333333 938.666667 213.333333 938.666667 298.666667 426.666667 298.666667M256 725.333333 362.666667 725.333333 213.333333 874.666667 64 725.333333 170.666667 725.333333 170.666667 170.666667 256 170.666667 256 725.333333Z" fill="#8a8a8a"></path></svg>';
                        break;
                    default:
                        return "";
                }
            },
            dataSourceCallback: (table, data, params, config, silent) => {
                let colunms = table.options.columns;
                colunms = colunms.map((col) => {
                    return col.field;
                });
                let page = params.page || 1;
                let size = params.size;
                let offset = (page - 1) * size;
                let limit = size;
                let sorters = params.sort;
                let orderBy = [];
                if (sorters && sorters.length) {
                    sorters.map((sorter) => {
                        return orderBy.push({
                            name: sorter.field,
                            asc: sorter.dir == 'asc',
                        });
                    })
                }
                // get data get_talbe_datas
                return this._rpc({
                    model: 'mana_dashboard.any_config',
                    method: 'get_data_source',
                    args: [this.get_config_id(), {
                        limit: limit,
                        offset: offset,
                        order_by: orderBy,
                        fetch_model_data: true,
                    }]
                }).then((result) => {
                    let datas = result.datas || [];
                    // deal many2one data
                    let count = datas.length;
                    return {
                        data: datas,
                        last_page: Math.ceil(count / size),
                    }
                });
            }
        });
    } else if (data_source_type_name == "sql"
        || data_source_type_name == "method"
        || data_source_type_name == "python") {
        this.table = new Tabulator(this.el, {
            height: "100%",
            pagination: true,
            paginationSize: 5,
            paginationSizeSelector: [10, 25, 50, 100],
            autoColumns: true,
            sortMode: "local",
            headerSortElement: function (column, dir) {
                switch (dir) {
                    case "asc":
                        return "<i class='fa fa-sort-up'>";
                        break;
                    case "desc":
                        return "<i class='fa fa-sort-down'>";
                        break;
                    default:
                        return "<i class='fa fa-sort'>";
                }
            }
        });
        this.table.setData(data_source.get_raw_datas());
    }
    let self = this;
    // row click event
    this.table.on("rowClick", (e, row) => {
        let data = row.getData();
        let data_source = this.get_data_source(0);
        let data_source_type_name = data_source.data_source_type;
        if (data_source_type_name == 'model') {
            let data_source_info = data_source.get_data_source_info();
            let model = data_source_info.model_name;
            let id = data.id;
            let widget = self.get_widget();
            widget.do_action({
                type: 'ir.actions.act_window',
                res_model: model,
                res_id: id,
                views: [[false, 'form']],
                target: 'current',
            });
        }
    });
} catch (e) {
    this.el.innerHTML = 'Error in Qweb Template' + e;
}
]]>
            </field>
            <!-- multi_data_source -->
            <field name="multi_data_source">0</field>
            <field name="help">
<![CDATA[
]]>
            </field>
        </record>

    </data>
</odoo>